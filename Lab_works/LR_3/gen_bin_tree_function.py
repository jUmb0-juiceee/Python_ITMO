# Вариант 17 - Root = 17; height = 4
# left_leaf = (root-4)^2, right_leaf = (root+3)*2
# p_print

from typing import List, Optional, Tuple
from pprint import pprint


def gen_left_leaf(root: int) -> int:
    """
        Функция выполняет нахождение значений левых ответвлений по заранее заготовленной формуле.

        Args:
            root: значение корня, от которого строится левое ответвление

        Returns:
            Функция возвращает целое число, которое является значением левого ответвления для конкретного корня
    """
    return (root - 4) ** 2


def gen_right_leaf(root: int) -> int:
    """
    Функция выполняет нахождение значений правых ответвлений по заранее заготовленной формуле.

    Args:
        root: значение корня, от которого строится правое ответвление

    Returns:
        Функция возвращает целое число, которое является значением правого ответвления для конкретного корня
    """
    return (root + 3) * 2


def gen_bin_tree(root: int, height: int) -> dict[int: list[dict, dict]]:
    """
    Функция выполняет построение бинарного дерева по входным параметрам. Для корня по заранее определённым функциям
    просчитываются два ответвления, после чего в словарь, где ключём является корень, заносится список -
    соответствующее ключу значение - из двух словарей, в каждом из которых ключём является ответвление предыдущего
    корня. В начале также происходит проверка на тип введённых данных.

    Args:
        root: значение корня дерева
        height: количество уровней в дереве

    Returns:
        Функция возвращает словарь с целым числом в качестве ключа и списком из двух словарей в качестве значения этого
        ключа. Последующие корни и ответвления тоже возвращаются в качестве словаря и целого числа и списка в нём,
        внутри предыдущих списков.
    """
    if int(root) != root or int(height) != height:
        return 'Ошибка типа входных данных'
    if height == 0:
        return {}
    height -= 1
    left_leaf = gen_left_leaf(root)
    right_leaf = gen_right_leaf(root)
    bin_tree = {root: [gen_bin_tree(left_leaf, height), gen_bin_tree(right_leaf, height)]}
    return bin_tree


def main():
    """
    Основная функция для взаимодействия пользователя с программой.

    Ввод:
        Первая строчка: значение корня дерева
        Вторая строчка: количество уровней в дереве

    Вывод:
        Бинарное дерево в виде словаря, содержащего целые числа как ключи и списки, как значения этих ключей
    """
    try:
        root = int(input())
        height = int(input())
        # Для более наглядного вывода бинарного дерева следующую строку можно раскомментировать
        # Для проверки тестами сделаем обычный вывод в одну строку
        # pprint(gen_bin_tree(root, height))
        print(gen_bin_tree(root, height))

    except ValueError as e:
        print(f"Ошибка ввода данных: {e}")

    except Exception as ex:
        print(f"Непредвиденная ошибка: {ex}")


if __name__ == '__main__':
    main()
